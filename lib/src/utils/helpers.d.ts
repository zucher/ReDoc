/**
 * Maps over array passing `isLast` bool to iterator as the second arguemnt
 */
export declare function mapWithLast<T, P>(array: T[], iteratee: (item: T, isLast: boolean) => P): P[];
/**
 * Creates an object with the same keys as object and values generated by running each
 * own enumerable string keyed property of object thru iteratee.
 * The iteratee is invoked with three arguments: (value, key, object).
 *
 * @param object the object to iterate over
 * @param iteratee the function invoked per iteration.
 */
export declare function mapValues<T, P>(object: Dict<T>, iteratee: (val: T, key: string, obj: Dict<T>) => P): Dict<P>;
/**
 * flattens collection using `prop` field as a children
 * @param collectionItems collection items
 * @param prop item property with child elements
 */
export declare function flattenByProp<T extends object, P extends keyof T>(collectionItems: T[], prop: P): T[];
export declare function stripTrailingSlash(path: string): string;
export declare function isAbsolutePath(path: string): boolean;
export declare function isNumeric(n: any): n is number;
export declare function appendToMdHeading(md: string, heading: string, content: string): string;
export declare const mergeObjects: <T extends object = object>(target: T, ...sources: T[]) => T;
